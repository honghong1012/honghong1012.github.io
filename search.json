[{"title":"贪心算法（greedy algorithm)","url":"/2021/12/21/%E8%B4%AA%E5%BF%83%E7%AE%97%E6%B3%95%EF%BC%88greedy-algorithm/","content":"算法本质选择每一阶段的局部最优，从而达到全局最优化\n算法应用场景\n无固定套路，常识性推导\n想不到相应的反例，可以试试贪心\n贪心算法跑过测试用例即可，或自圆其说  \n\n贪心一般解题步骤\n将原本问题分解为若干子问题\n找出适合的贪心策略\n求出每个子问题最优解\n将局部最优解堆叠成全局最优解\n\nleetcode相关题目455.分发饼干(assign cookies)题目链接：\n\n数组-&gt;升序排列，遍历\n可用cookies的index来减少for循环层数\n两种思路\n时间复杂度 O(n)\n\nclass solution:    def find(self, g:List[int], s:List[int]) -&gt; int:        g.sort() # 先进行升序排列        s.sort()        index = 0 # 利用cookies下标代替两层for循环        for i in range(len(s)):            if index &lt; len(g) and s[i] &gt;= g[index]: # ！满足的标准和下标移动                index += 1        return index\n\n376.摆动序列（wiggle subsequence)题目链接：\n\n每个峰值的判断（判断单调区间）\n最右峰值的判断\n时间复杂度 O(n)\n\nclass solution:    def wiggleMaxLength(self, nums:List[int]) -&gt; int:        res = 1        cuffix = 0        prefix = 0        for i in range(len(nums)-1):            curfix = nums[i+1] - nums[i]            if curfix * prefix &lt;= 0 and curfix != 0:                res += 1                prefix = curfix        return res \n\n53.最大子序和（）题目链接：\nclass Solution:    def maxSubArray(self, nums: List[int]) -&gt; int:        if nums is None:            return nums        temp = 0        maxsum = nums[0]        for i in range(len(nums)):            temp += nums[i]            if temp &gt; maxsum:                maxsum = temp            if temp &lt; 0:                temp = 0        return maxsum\n\n122.买卖股票的最佳时机（best time to buy and sell stock2)题目链接：\n\n我的做法想的太过复杂，使用了判断单调上升区间卖出计算\n时间复杂度 O(n)  \n\nclass Solution:    def maxProfit(self, prices: List[int]) -&gt; int:        prefix, curfix, profit = 0, 0, 0        begin, end = -1, -1        for i in range(len(prices)-1):            curfix = prices[i+1] - prices[i]            if prefix * curfix &lt;= 0 and curfix &gt; 0: #上升区间起点                begin = prices[i]            if prefix * curfix &lt;= 0 and curfix &lt;= 0 and prefix &gt; 0: #上升区间终点                end = prices[i]            if i+1 == len(prices)-1 and prices[-1] - prices[-2] &gt; 0: #判断list末尾是否为上升区间终点                end = prices[i+1]            if begin != -1 and end != -1: #只有同时找到起点和终点时才能组成一个单调区间                profit += (end - begin)                end, begin = -1, -1            prefix = curfix        return profit\n\n题解版本：\n\n实际上只关注正利润，由于题目中股票持有和卖出的特性\n只要利润为正，就记入总利润中，此特性也可以在画的图中展现出来class Solution:    def maxProfit(self, prices: List[int]) -&gt; int:        result = 0        for i in range(1, len(prices)):            result += max(prices[i] - prices[i - 1], 0)        return result\n\n55.跳跃游戏（jump game）题目链接：https://leetcode-cn.com/problems/jump-game/\n\n局部最优解：可跳跃的最大覆盖范围 整体：能否覆盖到终点\nindex：棋子跳跃的下标 cover：棋子当下能够覆盖到的最远下标\n利用cover限制index，并作为while循环的中断条件class Solution:    def canJump(self, nums: List[int]) -&gt; bool:        if len(nums) == 1:            return True        cover = 0        index = 0        while index &lt;= cover:            cover = max(index+nums[index], cover)            if cover &gt;= len(nums) - 1:                return True            index += 1        return False\n\n45.跳跃游戏II题目链接：https://leetcode-cn.com/problems/jump-game-ii/submissions/本题与55相比，不同之处：45输出能否覆盖终点，本题输出覆盖终点的最小步数\n\n局部：可移动距离中尽可能多走，未到终点则步数加1；整体：一步尽可能多走，达到最小步数\ncurCover：当前可覆盖 nextCover：下一步可覆盖\n注意棋子跳跃的时候边界范围的设定class Solution:    def jump(self, nums: List[int]) -&gt; int:        if len(nums) == 1:            return 0        index, curCover, nextCover = 0, 0, 0        step = 0        while index &lt; len(nums) - 1:            nextCover = max(index+nums[index], nextCover)            if index == curCover:                curCover = nextCover                step += 1            index += 1        return step\n\n1005.k次取反后最大化的数组之和(maximize sum of array after k negations)题目链接：https://leetcode-cn.com/problems/maximize-sum-of-array-after-k-negations/\n\n数组按绝对值由大到小排序\n遍历数组，遇到负数则进行取反，k-=1；k=0时跳出循环\n若遍历完全还有剩余k，则取数组最后一个数（最小的数值）反复取反\nO(n)class Solution:    def largestSumAfterKNegations(self, nums: List[int], k: int) -&gt; int:        nums = sorted(nums, key=abs,reverse=True)        for i in range(len(nums)):            if k &gt; 0:                if nums[i] &lt; 0:                    nums[i] = -nums[i]                    k -= 1                else:                    continue            else:                break        if k &gt; 0:            if k % 2 == 1:                nums[-1] = -nums[-1]        return sum(nums)```  ## 134.加油站（gas station）题目链接：https://leetcode-cn.com/problems/gas-station/该题和某公司oa中的魔毯问题一样* 如果sum(gas) &lt; sum(cost),那么汽车不可能走完一圈* res[i] = gas[i] - cost[i]```pythonclass Solution:    def canCompleteCircuit(self, gas: List[int], cost: List[int]) -&gt; int:        start, cursum, totalsum =0, 0, 0        for i in range(len(gas)):            cursum += gas[i] - cost[i]            totalsum += gas[i] - cost[i]            if cursum &lt; 0:                start = i + 1                cursum = 0        if totalsum &lt; 0:            return -1        return start\n\n","categories":["刷题笔记"]},{"title":"巴斯克芝士蛋糕","url":"/2021/12/27/%E5%B7%B4%E6%96%AF%E5%85%8B%E8%8A%9D%E5%A3%AB%E8%9B%8B%E7%B3%95/","content":"材料（此配方可制作6寸巴斯克芝士，8寸则所有用量乘以2）\n奶油奶酪 cream cheese: 350g\n细砂糖 sugar: 75g\n蛋黄 egg yolk: 3个\n全蛋 egg（大): 2个\n淡奶油 heavy whipping cream: 150g\n牛奶 whole milk: 50g\n玉米淀粉/低筋面粉 corn starch/cake flour: 12g\n\n简易做法版本（无电动打蛋器/无料理棒/无筛）\n奶油奶酪加入细砂糖，隔水加热，搅拌至顺滑（不能过火，有可能导致水油分离）\n\n\n\n分次加入3个蛋黄，2个全蛋，搅拌至吸收再加入下一个（鸡蛋可提前从冰箱取出放至室温，减少水油分离可能性）\n\n \n\n加入牛奶，搅拌均匀（有抹茶粉/可可粉则在牛奶后加入）\n\n加入淡奶油，搅拌均匀\n\n加入玉米淀粉，搅拌均匀\n\n烤箱预热，模具铺入烘焙纸（烘焙纸打湿/弄皱后更容易贴合模具）\n\n烤箱中层，220度22-23mins，提前查看表皮上色，上色不够深则移入烤箱上层烘烤2-3mins（我的公寓烤箱拧至一半多些，烘烤20mins后移入烤箱上层，3-4mins）\n\n出炉冷却后保鲜膜包裹起来，无需脱模，冷藏一夜\n\n \n\n可把部分剩余淡奶油打发至六分，结合水果进行装饰\n\n  \n\n\n \n\n\n","categories":["食谱"]},{"title":"Hello World","url":"/2021/12/18/hello-world/","content":"Welcome to my blog! This is my very first post. Actually I’ve been setting up my blog for a long time(even though I often found excuses not to implement anything on the website)\n"},{"title":"关于在winter break摆烂的随笔小记1","url":"/2021/12/20/%E5%85%B3%E4%BA%8E%E5%9C%A8winter-break%E6%91%86%E7%83%82%E7%9A%84%E9%9A%8F%E7%AC%94%E5%B0%8F%E8%AE%B01/","content":"“突然想起了学生公寓门口的拌饺，吃完一顿要打满六个小时的韭菜味饱嗝。以前想不到吃什么的时候总会买一份拌饺加一份水果捞，拎着回宿舍和朋友一起看剧。让人怀念的还有那个摊位卖的福鼎肉片，大晚上偷偷溜出去踩水之后总会买一份的宵夜，想起来总是很快乐的日子。不想看的曾经，但又想分享的曾经。”  \n\n\n\n\n\n本来想在微博上碎碎念的文字，后来突然想起自己刚搭建的秘密基地，也成为了我码字第一个博客的契机。当然了，这种废话文学只能被归类到“随笔”中，那干脆也来写写我winter break中的摆烂一天，好歹也是记录我存在过的证据了。以后我的孙子孙女可以直接摸过来看我的日记咯，还挺有趣的。  \n今天早上是和阿叶约的“芝加哥圣诞集市之行”，一直想去感受一下这边的圣诞氛围，苦于没有车，我和阿叶总是得等到有intercampus的时候，才敢出趟“远门”。去之前倒是很期待在集市里买到可爱的纪念杯，听说上面会印有每年的年份，就蛮有意义。还打算买个我最爱的pretzel和芝士法棍三明治，捧着热红酒慢慢悠悠的逛一圈。  \n然而人们对圣诞的热情还是远超我的想象。有点像市中心“义乌小市场”的圣诞集市，就连进去也要排队，简直是梦回迪士尼四小时玩俩机动游戏的噩梦了。  \n\n\n","categories":["随笔"]}]